
import oracledb as cx_Oracle
import time
import sys
from datetime import datetime

# ---------- CONFIG: change these ----------
DB_USER = "system"
DB_PASS = "root"
DB_DSN  = cx_Oracle.makedsn("localhost", 1521, service_name="xepdb1")
# -----------------------------------------

# ---------- DB CONNECTION ----------
def connect_db():
    try:
        con = cx_Oracle.connect(user=DB_USER, password=DB_PASS, dsn=DB_DSN)
        cur = con.cursor()
        print("Connected to Oracle DB as", DB_USER)
        return con, cur
    except Exception as e:
        print("Connection failed:", e)
        sys.exit(1)

con, cur = connect_db()

# ---------- Helper: execute safely ----------
def try_execute(sql, binds=None, silent_on_exists=False):
    try:
        if binds:
            cur.execute(sql, binds)
        else:
            cur.execute(sql)
    except Exception as e:
        msg = str(e).lower()
        if silent_on_exists and ("already exists" in msg or "ora-00955" in msg):
            pass
        else:
            print("SQL Error:", e)
            # do not sys.exit â€” allow interactive debugging

# ---------- SCHEMA & SETUP ----------
def setup_schema():
    print("\n--- Creating / Ensuring Pharmacy Schema ---")
    # Suppliers
    try_execute("""
    CREATE TABLE Suppliers (
        supplier_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR2(120) NOT NULL,
        contact_email VARCHAR2(120),
        phone VARCHAR2(20),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """, silent_on_exists=True)
    # Customers
    try_execute("""
    CREATE TABLE Customers (
        customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR2(120) NOT NULL,
        phone VARCHAR2(20),
        email VARCHAR2(120),
        address VARCHAR2(300),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """, silent_on_exists=True)
    # Medicines
    try_execute("""
    CREATE TABLE Medicines (
        medicine_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR2(200) NOT NULL,
        pharma_form VARCHAR2(50),
        strength VARCHAR2(50),
        unit_price NUMBER(10,2) DEFAULT 0,
        supplier_id NUMBER,
        expiry_date DATE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT fk_med_supplier FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)
    )
    """, silent_on_exists=True)
    # Inventory
    try_execute("""
    CREATE TABLE Inventory (
        medicine_id NUMBER PRIMARY KEY,
        qty NUMBER DEFAULT 0,
        min_threshold NUMBER DEFAULT 10,
        CONSTRAINT fk_inv_med FOREIGN KEY(medicine_id) REFERENCES Medicines(medicine_id)
    )
    """, silent_on_exists=True)
    # Orders & Order_Items
    try_execute("""
    CREATE TABLE Orders (
        order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        order_date DATE DEFAULT SYSDATE,
        customer_id NUMBER,
        total_amount NUMBER(12,2),
        status VARCHAR2(20),
        CONSTRAINT fk_ord_cust FOREIGN KEY(customer_id) REFERENCES Customers(customer_id)
    )
    """, silent_on_exists=True)
    try_execute("""
    CREATE TABLE Order_Items (
        order_item_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        order_id NUMBER,
        medicine_id NUMBER,
        quantity NUMBER,
        unit_price NUMBER(10,2),
        line_total NUMBER(12,2),
        CONSTRAINT fk_oi_order FOREIGN KEY(order_id) REFERENCES Orders(order_id)
    )
    """, silent_on_exists=True)
    # Audit log
    try_execute("""
    CREATE TABLE Audit_Log (
        audit_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        action_by VARCHAR2(100),
        action VARCHAR2(100),
        object_name VARCHAR2(100),
        details VARCHAR2(2000),
        action_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """, silent_on_exists=True)

    # Add a CHECK constraint: unit_price >= 0
    try:
        try_execute("ALTER TABLE Medicines ADD (CONSTRAINT chk_price_nonneg CHECK (unit_price >= 0))")
    except Exception:
        pass  # ignore if exists

    con.commit()
    print("Schema ensured. Tables and basic constraints created.\n")
    time.sleep(1)

# ---------- Seed realistic sample data ----------
def seed_data():
    print("Seeding suppliers, customers, medicines, inventory (if not present)...")
    # Suppliers
    try_execute("INSERT INTO Suppliers(name, contact_email, phone) VALUES(:1, :2, :3)",
                ("Cipla Ltd.", "sales@cipla.com", "+91-9876543210"))
    try_execute("INSERT INTO Suppliers(name, contact_email, phone) VALUES(:1, :2, :3)",
                ("Sun Pharma", "support@sunpharma.com", "+91-9123456780"))
    # Customers
    try_execute("INSERT INTO Customers(name, phone, email, address) VALUES(:1,:2,:3,:4)",
                ("John Doe", "9998887776", "john@example.com", "23 Green Street, Vellore"))
    # Medicines (one valid, one near-expiry, one expired)
    try_execute("""
    INSERT INTO Medicines(name, pharma_form, strength, unit_price, supplier_id, expiry_date)
    VALUES(:1,:2,:3,:4,:5,TO_DATE(:6,'YYYY-MM-DD'))
    """, ("Paracetamol", "Tablet", "500 mg", 2.50, 1, "2026-02-15"))
    try_execute("""
    INSERT INTO Medicines(name, pharma_form, strength, unit_price, supplier_id, expiry_date)
    VALUES(:1,:2,:3,:4,:5,TO_DATE(:6,'YYYY-MM-DD'))
    """, ("Amoxicillin", "Capsule", "250 mg", 5.00, 2, "2025-12-01"))
    try_execute("""
    INSERT INTO Medicines(name, pharma_form, strength, unit_price, supplier_id, expiry_date)
    VALUES(:1,:2,:3,:4,:5,TO_DATE(:6,'YYYY-MM-DD'))
    """, ("OldSyrup", "Syrup", "100 ml", 40.00, 2, "2020-01-01"))
    con.commit()
    # Inventory: set qty for all medicines if not present
    cur.execute("SELECT medicine_id FROM Medicines")
    meds = [r[0] for r in cur.fetchall()]
    for mid in meds:
        try_execute("INSERT INTO Inventory(medicine_id, qty, min_threshold) VALUES(:1, :2, :3)",
                    (mid, 50, 10))
    con.commit()
    print("Seeding done.\n")
    time.sleep(1)

# ---------- Triggers: expiry protection & audit ----------
def setup_triggers():
    print("Creating triggers: expiry-check (BEFORE INSERT) and audit logging (AFTER INSERT/UPDATE/DELETE).")
    # BEFORE INSERT on Medicines: deny expired
    try_execute("""
    CREATE OR REPLACE TRIGGER trg_med_before_ins
    BEFORE INSERT OR UPDATE ON Medicines
    FOR EACH ROW
    DECLARE
      e_expired EXCEPTION;
    BEGIN
      IF :NEW.expiry_date IS NOT NULL AND :NEW.expiry_date < TRUNC(SYSDATE) THEN
         RAISE e_expired;
      END IF;
      :NEW.name := UPPER(:NEW.name); -- normalize name
    EXCEPTION
      WHEN e_expired THEN
        RAISE_APPLICATION_ERROR(-20050, 'Cannot insert/update expired medicine');
    END;
    """)
    # AFTER changes to Orders and Medicines -> audit
    try_execute("""
    CREATE OR REPLACE TRIGGER trg_audit_orders
    AFTER INSERT OR UPDATE OR DELETE ON Orders
    FOR EACH ROW
    BEGIN
      IF INSERTING THEN
        INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER,'INSERT','ORDERS','Order placed or inserted');
      ELSIF UPDATING THEN
        INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER,'UPDATE','ORDERS','Order updated');
      ELSIF DELETING THEN
        INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER,'DELETE','ORDERS','Order deleted');
      END IF;
    END;
    """)
    try_execute("""
    CREATE OR REPLACE TRIGGER trg_audit_medicines
    AFTER INSERT OR UPDATE OR DELETE ON Medicines
    FOR EACH ROW
    BEGIN
      IF INSERTING THEN
        INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER,'INSERT','MEDICINES','Inserted ' || :NEW.name);
      ELSIF UPDATING THEN
        INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER,'UPDATE','MEDICINES','Updated ' || :NEW.name);
      ELSIF DELETING THEN
        INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER,'DELETE','MEDICINES','Deleted ' || :OLD.name);
      END IF;
    END;
    """)
    con.commit()
    print("Triggers created.\n")
    time.sleep(1)

# ---------- Stored Procedure: place order (transactional) ----------
def create_stored_procedures():
    print("Creating stored procedure sp_place_order (places order, updates inventory, adds order_items).")
    try_execute("""
    CREATE OR REPLACE PROCEDURE sp_place_order (
      p_customer_id IN NUMBER,
      p_items IN SYS.ODCINUMBERLIST, -- medicine_id1, med2, ...
      p_qtys  IN SYS.ODCINUMBERLIST  -- qtys parallel to p_items
    ) IS
      v_price NUMBER(10,2);
      v_total NUMBER(12,2) := 0;
      v_line NUMBER(12,2);
      v_order_id NUMBER;
    BEGIN
      IF p_items.COUNT != p_qtys.COUNT THEN
        RAISE_APPLICATION_ERROR(-20060, 'Items and quantities length mismatch');
      END IF;
      -- compute totals and check inventory
      FOR i IN 1 .. p_items.COUNT LOOP
        SELECT unit_price INTO v_price FROM Medicines WHERE medicine_id = p_items(i);
        IF (SELECT qty FROM Inventory WHERE medicine_id = p_items(i)) < p_qtys(i) THEN
          RAISE_APPLICATION_ERROR(-20061, 'Insufficient stock for medicine id ' || p_items(i));
        END IF;
        v_line := v_price * p_qtys(i);
        v_total := v_total + v_line;
      END LOOP;
      -- insert order
      INSERT INTO Orders(customer_id, total_amount, status) VALUES(p_customer_id, v_total, 'COMPLETED') RETURNING order_id INTO v_order_id;
      -- insert items and decrement inventory
      FOR i IN 1 .. p_items.COUNT LOOP
        SELECT unit_price INTO v_price FROM Medicines WHERE medicine_id = p_items(i);
        INSERT INTO Order_Items(order_id, medicine_id, quantity, unit_price, line_total)
        VALUES(v_order_id, p_items(i), p_qtys(i), v_price, v_price * p_qtys(i));
        UPDATE Inventory SET qty = qty - p_qtys(i) WHERE medicine_id = p_items(i);
      END LOOP;
      INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER,'PROC','sp_place_order','Order ' || v_order_id || ' by ' || p_customer_id);
      COMMIT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20062,'Medicine not found in procedure');
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
    END sp_place_order;
    """)
    con.commit()
    print("Stored procedure created.\n")
    time.sleep(1)

# ---------- Views for reporting ----------
def create_views():
    print("Creating view vw_inventory_summary for quick inventory glance.")
    try_execute("""
    CREATE OR REPLACE VIEW vw_inventory_summary AS
      SELECT m.medicine_id, m.name, m.pharma_form, m.strength, m.unit_price, NVL(i.qty,0) AS qty, m.expiry_date
      FROM Medicines m LEFT JOIN Inventory i ON m.medicine_id = i.medicine_id
    """)
    con.commit()
    print("View created.\n")
    time.sleep(1)

# ---------- USER-FACING FUNCTIONS (pharmacy style) ----------
def manage_inventory_menu():
    while True:
        print("\n--- Manage Inventory ---")
        print("1. Add New Medicine")
        print("2. Update Stock Quantity")
        print("3. View Inventory Summary")
        print("4. View Low Stock Items")
        print("5. View Expired / Near-Expiry Medicines")
        print("6. Back to Main")
        ch = input("Enter choice: ").strip()
        if ch == "1":
            add_medicine()
        elif ch == "2":
            update_stock()
        elif ch == "3":
            view_inventory_summary()
        elif ch == "4":
            view_low_stock()
        elif ch == "5":
            view_expiring_meds()
        elif ch == "6":
            break
        else:
            print("Invalid choice")

def add_medicine():
    print("\n--- Add New Medicine ---")
    name = input("Name: ").strip()
    form = input("Form (Tablet/Syrup/...): ").strip()
    strength = input("Strength (e.g. 500 mg): ").strip()
    try:
        price = float(input("Unit price (â‚¹): ").strip())
    except:
        print("Invalid price. Aborting.")
        return
    try:
        supplier_id = int(input("Supplier ID (or 0 for none): ").strip() or "0")
    except:
        supplier_id = 0
    expiry = input("Expiry date (YYYY-MM-DD) or blank: ").strip()
    expiry_clause = "NULL"
    binds = [name, form, strength, price, supplier_id]
    if expiry:
        expiry_clause = "TO_DATE(:6,'YYYY-MM-DD')"
        binds.append(expiry)
        sql = f"INSERT INTO Medicines(name, pharma_form, strength, unit_price, supplier_id, expiry_date) VALUES(:1,:2,:3,:4,:5,{expiry_clause})"
    else:
        sql = "INSERT INTO Medicines(name, pharma_form, strength, unit_price, supplier_id) VALUES(:1,:2,:3,:4,:5)"
    try:
        cur.execute(sql, binds)
        con.commit()
        # get last medicine_id (simple select)
        cur.execute("SELECT medicine_id, name FROM Medicines WHERE ROWID = (SELECT MAX(ROWID) FROM Medicines)")
        r = cur.fetchone()
        if r:
            mid = r[0]
            try_execute("INSERT INTO Inventory(medicine_id, qty, min_threshold) VALUES(:1, :2, :3)", (mid, 0, 10))
            con.commit()
        print("Medicine added and inventory row created (if not existed).")
    except Exception as e:
        print("Error adding medicine:", e)

def update_stock():
    print("\n--- Update Stock ---")
    try:
        mid = int(input("Medicine ID: ").strip())
        qty = int(input("Quantity to add (use negative to reduce): ").strip())
    except:
        print("Invalid input")
        return
    try:
        cur.execute("UPDATE Inventory SET qty = NVL(qty,0) + :1 WHERE medicine_id = :2", (qty, mid))
        if cur.rowcount == 0:
            print("Inventory row missing for this medicine. Creating one.")
            cur.execute("INSERT INTO Inventory(medicine_id, qty, min_threshold) VALUES(:1, :2, :3)", (mid, qty, 10))
        con.commit()
        print("Stock updated.")
        cur.execute("INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER,'UPDATE','INVENTORY','Medicine '||:1||' qty change '||:2)", (mid, qty))
        con.commit()
    except Exception as e:
        print("Error updating stock:", e)

def view_inventory_summary():
    print("\n--- Inventory Summary ---")
    cur.execute("SELECT medicine_id, name, pharma_form, strength, unit_price, qty, expiry_date FROM vw_inventory_summary")
    rows = cur.fetchall()
    if not rows:
        print("No medicines found.")
        return
    print(f"{'ID':<5} {'Name':<25} {'Form':<8} {'Str':<10} {'Price':<8} {'Qty':<5} {'Expiry':<12}")
    for r in rows:
        mid, name, form, strength, price, qty, expiry = r
        expiry_str = expiry.strftime("%Y-%m-%d") if expiry else "N/A"
        print(f"{mid:<5} {name[:24]:<25} {form:<8} {strength:<10} {price:<8} {qty:<5} {expiry_str:<12}")
    time.sleep(1)

def view_low_stock():
    print("\n--- Low Stock Items (qty <= min_threshold) ---")
    cur.execute("""
      SELECT m.medicine_id, m.name, i.qty, i.min_threshold
      FROM Inventory i JOIN Medicines m ON i.medicine_id = m.medicine_id
      WHERE NVL(i.qty,0) <= NVL(i.min_threshold,10)
      ORDER BY i.qty ASC
    """)
    rows = cur.fetchall()
    if not rows:
        print("No low stock items.")
    else:
        for r in rows:
            print(f"ID:{r[0]} | {r[1]} | Qty:{r[2]} | Threshold:{r[3]}")
    time.sleep(1)

def view_expiring_meds():
    print("\n--- Expired / Near-expiry Medicines ---")
    # expired
    cur.execute("SELECT medicine_id, name, expiry_date FROM Medicines WHERE expiry_date < TRUNC(SYSDATE)")
    expired = cur.fetchall()
    if expired:
        print("EXPIRED MEDICINES:")
        for r in expired:
            print(f"ID:{r[0]} | {r[1]} | Expiry:{r[2].strftime('%Y-%m-%d')}")
    else:
        print("No expired medicines.")
    # near expiry within 90 days
    cur.execute("SELECT medicine_id, name, expiry_date FROM Medicines WHERE expiry_date BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE)+90")
    near = cur.fetchall()
    if near:
        print("\nNEAR-EXPIRY (next 90 days):")
        for r in near:
            print(f"ID:{r[0]} | {r[1]} | Expiry:{r[2].strftime('%Y-%m-%d')}")
    time.sleep(1)

# ---------- SALES & Billing ----------
def sales_menu():
    while True:
        print("\n--- Sales & Billing ---")
        print("1. Create Customer Invoice (Place Order)")
        print("2. View Orders")
        print("3. Daily Sales Summary (report)")
        print("4. Back to Main")
        ch = input("Enter choice: ").strip()
        if ch == "1":
            create_invoice()
        elif ch == "2":
            view_orders()
        elif ch == "3":
            daily_sales_summary()
        elif ch == "4":
            break
        else:
            print("Invalid choice")

def create_invoice():
    print("\n--- Create Invoice ---")
    try:
        cid = int(input("Customer ID (enter 0 to create guest): ").strip() or "0")
    except:
        print("Invalid customer id")
        return
    if cid == 0:
        # quick guest creation
        name = input("Guest name: ").strip() or "Guest"
        phone = input("Phone (optional): ").strip()
        cur.execute("INSERT INTO Customers(name, phone) VALUES(:1, :2)", (name, phone))
        con.commit()
        cur.execute("SELECT customer_id FROM Customers WHERE ROWID = (SELECT MAX(ROWID) FROM Customers)")
        cid = cur.fetchone()[0]
        print("Guest customer id:", cid)
    items = []
    qtys = []
    while True:
        try:
            mid = int(input("Medicine ID to add (0 to finish): ").strip())
        except:
            print("Invalid id")
            continue
        if mid == 0:
            break
        try:
            q = int(input("Quantity: ").strip())
        except:
            print("Invalid qty")
            continue
        items.append(mid)
        qtys.append(q)
    if not items:
        print("No items selected. Aborting invoice.")
        return
    # call stored procedure sp_place_order
    # needs ODCINUMBERLIST â€” use cursor.var with arrays
    try:
        arr_items = cur.arrayvar(cx_Oracle.NUMBER, items)
        arr_qtys = cur.arrayvar(cx_Oracle.NUMBER, qtys)
        cur.callproc("sp_place_order", [cid, arr_items, arr_qtys])
        print("Invoice created and inventory updated. (Stored proc sp_place_order handled transactions.)")
    except Exception as e:
        print("Error placing order:", e)

def view_orders():
    print("\n--- Orders List ---")
    cur.execute("""
      SELECT o.order_id, o.order_date, c.name, o.total_amount, o.status
      FROM Orders o LEFT JOIN Customers c ON o.customer_id = c.customer_id
      ORDER BY o.order_date DESC
    """)
    rows = cur.fetchall()
    if not rows:
        print("No orders found.")
        return
    for r in rows:
        oid, odate, cname, total, status = r
        odate_str = odate.strftime("%Y-%m-%d")
        print(f"OrderID:{oid} | Date:{odate_str} | Customer:{cname} | Total:â‚¹{total} | Status:{status}")
        # show items
        cur.execute("SELECT medicine_id, quantity, unit_price, line_total FROM Order_Items WHERE order_id = :1", (oid,))
        its = cur.fetchall()
        for it in its:
            print(f"  - MedID:{it[0]} | Qty:{it[1]} | Unit:â‚¹{it[2]} | Line:â‚¹{it[3]}")
    time.sleep(1)

def daily_sales_summary():
    print("\n--- Daily Sales Summary (last 7 days) ---")
    cur.execute("""
      SELECT TRUNC(order_date) sale_date, COUNT(*) orders, SUM(total_amount) total_sales, AVG(total_amount) avg_order
      FROM Orders
      WHERE order_date >= TRUNC(SYSDATE)-7
      GROUP BY TRUNC(order_date)
      ORDER BY TRUNC(order_date) DESC
    """)
    rows = cur.fetchall()
    if not rows:
        print("No recent sales.")
        return
    for r in rows:
        date_str = r[0].strftime('%Y-%m-%d')
        print(f"{date_str} | Orders: {r[1]} | Sales: â‚¹{r[2]:.2f} | Avg order: â‚¹{r[3]:.2f}")
    time.sleep(1)

# ---------- Supplier Management ----------
def supplier_menu():
    while True:
        print("\n--- Supplier Management ---")
        print("1. Add Supplier")
        print("2. View Suppliers")
        print("3. Supplier Performance (avg price, medicines count)")
        print("4. Back to Main")
        ch = input("Enter choice: ").strip()
        if ch == "1":
            add_supplier()
        elif ch == "2":
            view_suppliers()
        elif ch == "3":
            supplier_performance()
        elif ch == "4":
            break
        else:
            print("Invalid choice")

def add_supplier():
    print("\n--- Add Supplier ---")
    name = input("Name: ").strip()
    email = input("Email: ").strip()
    phone = input("Phone: ").strip()
    try:
        cur.execute("INSERT INTO Suppliers(name, contact_email, phone) VALUES(:1,:2,:3)", (name, email, phone))
        con.commit()
        print("Supplier added.")
    except Exception as e:
        print("Error:", e)

def view_suppliers():
    print("\n--- Suppliers ---")
    cur.execute("SELECT supplier_id, name, contact_email, phone, created_at FROM Suppliers")
    for r in cur.fetchall():
        print(f"ID:{r[0]} | {r[1]} | {r[2]} | {r[3]} | Created:{r[4].strftime('%Y-%m-%d %H:%M:%S')}")
    time.sleep(1)

def supplier_performance():
    print("\n--- Supplier Performance (group by supplier) ---")
    cur.execute("""
      SELECT s.supplier_id, s.name, COUNT(m.medicine_id) meds_count, AVG(m.unit_price) avg_price, MAX(m.unit_price) max_price
      FROM Suppliers s LEFT JOIN Medicines m ON s.supplier_id = m.supplier_id
      GROUP BY s.supplier_id, s.name
      HAVING COUNT(m.medicine_id) >= 0
      ORDER BY meds_count DESC
    """)
    rows = cur.fetchall()
    for r in rows:
        print(f"SupplierID:{r[0]} | {r[1]} | Medicines:{r[2]} | Avg Price:â‚¹{r[3] or 0:.2f} | Max:â‚¹{r[4] or 0:.2f}")
    time.sleep(1)

# ---------- Reports & Advanced Queries (demonstrate ANY/ALL/IN/EXISTS/UNION/INTERSECT) ----------
def reports_menu():
    while True:
        print("\n--- Reports & Advanced Queries ---")
        print("1. Medicines priced above average (subquery)")
        print("2. Medicines having inventory > ANY (example)")
        print("3. Union/Intersect demo (names)")
        print("4. Audit Log")
        print("5. Back to Main")
        ch = input("Enter choice: ").strip()
        if ch == "1":
            meds_above_avg()
        elif ch == "2":
            meds_inventory_any()
        elif ch == "3":
            union_intersect_demo()
        elif ch == "4":
            view_audit_log()
        elif ch == "5":
            break
        else:
            print("Invalid choice")

def meds_above_avg():
    print("\n--- Medicines priced above average ---")
    cur.execute("SELECT name, unit_price FROM Medicines WHERE unit_price > (SELECT AVG(unit_price) FROM Medicines)")
    rows = cur.fetchall()
    if not rows:
        print("None")
    else:
        for r in rows:
            print(f"{r[0]} | â‚¹{r[1]:.2f}")
    time.sleep(1)

def meds_inventory_any():
    print("\n--- Medicines with inventory greater than ANY (example) ---")
    # Example: find meds with qty greater than ANY of the mins across inventory (toy example)
    cur.execute("""
      SELECT m.name, i.qty
      FROM Medicines m JOIN Inventory i ON m.medicine_id = i.medicine_id
      WHERE i.qty > ANY (SELECT min_threshold FROM Inventory)
    """)
    for r in cur.fetchall():
        print(f"{r[0]} | Qty: {r[1]}")
    time.sleep(1)

def union_intersect_demo():
    print("\n--- UNION / INTERSECT demo for names ---")
    cur.execute("SELECT name FROM Suppliers UNION SELECT name FROM Customers")
    print("Union (unique names):", [r[0] for r in cur.fetchall()])
    cur.execute("SELECT name FROM Suppliers INTERSECT SELECT name FROM Customers")
    print("Intersect (common names):", [r[0] for r in cur.fetchall()])
    time.sleep(1)

def view_audit_log():
    print("\n--- Audit Log (recent 20) ---")
    cur.execute("SELECT audit_id, action_by, action, object_name, details, action_time FROM Audit_Log ORDER BY action_time DESC")
    rows = cur.fetchmany(20)
    for r in rows:
        print(f"{r[0]} | {r[1]} | {r[2]} | {r[3]} | {r[4]} | {r[5]}")
    time.sleep(1)

# ---------- Database Maintenance ----------
def maintenance_menu():
    while True:
        print("\n--- Maintenance & Admin ---")
        print("1. Create Schema & Objects (tables, triggers, procs, views)")
        print("2. Seed sample data")
        print("3. Recreate stored procedures / views / triggers")
        print("4. Cleanup (DROP many objects) - CAREFUL")
        print("5. Back to Main")
        ch = input("Enter choice: ").strip()
        if ch == "1":
            setup_schema()
            create_views()
            setup_triggers()
            create_stored_procedures()
            print("Setup done.")
        elif ch == "2":
            seed_data()
        elif ch == "3":
            create_views()
            setup_triggers()
            create_stored_procedures()
            print("Recreated procs/triggers/views.")
        elif ch == "4":
            confirm = input("Are you sure? Drop tables and objects (y/n): ").strip().lower()
            if confirm == 'y':
                cleanup_db()
        elif ch == "5":
            break
        else:
            print("Invalid choice")

def cleanup_db():
    print("Dropping objects (attempt). This is destructive.")
    stmts = [
        "DROP TRIGGER trg_audit_medicines",
        "DROP TRIGGER trg_audit_orders",
        "DROP TRIGGER trg_med_before_ins",
        "DROP PROCEDURE sp_place_order",
        "DROP VIEW vw_inventory_summary",
        "DROP TABLE Order_Items CASCADE CONSTRAINTS",
        "DROP TABLE Orders CASCADE CONSTRAINTS",
        "DROP TABLE Inventory CASCADE CONSTRAINTS",
        "DROP TABLE Medicines CASCADE CONSTRAINTS",
        "DROP TABLE Customers CASCADE CONSTRAINTS",
        "DROP TABLE Suppliers CASCADE CONSTRAINTS",
        "DROP TABLE Audit_Log CASCADE CONSTRAINTS"
    ]
    for s in stmts:
        try:
            try_execute(s)
            con.commit()
            print("Dropped:", s)
        except Exception as e:
            print("Could not drop:", s, "->", e)
    print("Cleanup attempted.\n")

# ---------- Helper: show simple menu and start ----------
def main_menu():
    while True:
        print("\n" + "*"*60)
        print("      PHARMACY MANAGEMENT SYSTEM â€” Realistic Mode")
        print("*"*60)
        print("1. Manage Inventory")
        print("2. Sales & Billing")
        print("3. Supplier Management")
        print("4. Reports & Advanced Queries")
        print("5. Maintenance & Admin")
        print("6. Exit")
        choice = input("Enter your choice: ").strip()
        if choice == "1":
            manage_inventory_menu()
        elif choice == "2":
            sales_menu()
        elif choice == "3":
            supplier_menu()
        elif choice == "4":
            reports_menu()
        elif choice == "5":
            maintenance_menu()
        elif choice == "6":
            print("Goodbye! Closing connection.")
            con.close()
            break
        else:
            print("Invalid choice. Try again.")

# ---------- Start-up welcome and ensure minimal objects exist ----------
def startup():
    print("Welcome to Pharmacy Management System.")
    # Ensure schema created by default for convenience
    setup_schema()
    create_views()
    create_stored_procedures()
    setup_triggers()
    seed_data()
    print("System ready. Launching main menu...\n")
    time.sleep(1)
    main_menu()

if __name__ == "__main__":
    startup()
