import oracledb as cx_Oracle
import time
import sys
from datetime import datetime
import re
import stdiomask

EMAIL_RE = re.compile(r"^[^@\s]+@[^@\s]+\.[^@\s]+$")
PHONE_RE = re.compile(r"^[\d\+\-\s\(\)]{7,25}$") 

# ---------- CONFIG: change these ----------
DB_USER = "system"
DB_PASS = "root"
DB_DSN  = cx_Oracle.makedsn("localhost", 1521, service_name="xepdb1")
# -----------------------------------------

# ---------- DB CONNECTION ----------
def connect_db():
    try:
        con = cx_Oracle.connect(user=DB_USER, password=DB_PASS, dsn=DB_DSN)
        cur = con.cursor()
        cur.callproc("DBMS_OUTPUT.ENABLE")
        print("Connected to Oracle DB as", DB_USER)
        return con, cur
    except Exception as e:
        print("Connection failed:", e)
        sys.exit(1)

con, cur = connect_db()

# ---------- Helper: execute safely ----------
def try_execute(sql, binds=None, silent_on_exists=False):
    try:
        if binds:
            cur.execute(sql, binds)
        else:
            cur.execute(sql)
    except Exception as e:
        msg = str(e).lower()
        if silent_on_exists and ("already exists" in msg or "ora-00955" in msg):
            pass
        else:
            print("SQL Error:", e)
            # do not sys.exit â€” allow interactive debugging
'''

# ---------- Helper: read DBMS_OUTPUT messages ----------
def print_dbms_output(cur):
    """Reads and prints any DBMS_OUTPUT messages from the current session."""
    statusVar = cur.var(int)
    lineVar = cur.var(str)
    while True:
        cur.callproc("DBMS_OUTPUT.GET_LINE", (lineVar, statusVar))
        if statusVar.getvalue() != 0:
            break
        print(lineVar.getvalue())
        print("Note: Expired medicines cannot be sold in invoices.")
'''


# ---------- SCHEMA & SETUP ----------

def setup_schema():
    print("\n--- Creating / Ensuring Pharmacy Schema ---")
    # Suppliers
    try_execute("""
    CREATE TABLE Suppliers (
        supplier_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR2(120) NOT NULL,
        contact_email VARCHAR2(120) NOT NULL,
        phone VARCHAR2(20) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT unique_supplier_entry UNIQUE (name,contact_email,phone)
    )
    """, silent_on_exists=True)
    # Customers
    try_execute("""
    CREATE TABLE Customers (
        customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR2(120) NOT NULL,
        phone VARCHAR2(20),
        email VARCHAR2(120),
        address VARCHAR2(300),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """, silent_on_exists=True)
    # Medicines
    try_execute("""
    CREATE TABLE Medicines (
        medicine_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR2(200) NOT NULL,
        pharma_form VARCHAR2(50),
        strength VARCHAR2(50),
        unit_price NUMBER(10,2) DEFAULT 0,
        supplier_id NUMBER,
        expiry_date DATE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y','N')),
        retired_at TIMESTAMP NULL,
        CONSTRAINT fk_med_supplier FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id),
        CONSTRAINT unique_medicine_entry UNIQUE (name, pharma_form, strength, expiry_date)
    )
""", silent_on_exists=True)

    # Inventory
    try_execute("""
    CREATE TABLE Inventory (
        medicine_id NUMBER PRIMARY KEY,
        qty NUMBER DEFAULT 0,
        min_threshold NUMBER DEFAULT 10,
        CONSTRAINT fk_inv_med FOREIGN KEY(medicine_id) REFERENCES Medicines(medicine_id)
    )
    """, silent_on_exists=True)
    # Orders & Order_Items
    try_execute("""
    CREATE TABLE Orders (
        order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        order_date DATE DEFAULT SYSDATE,
        customer_id NUMBER,
        total_amount NUMBER(12,2),
        status VARCHAR2(20),
        CONSTRAINT fk_ord_cust FOREIGN KEY(customer_id) REFERENCES Customers(customer_id)
    )
    """, silent_on_exists=True)
    try_execute("""
    CREATE TABLE Order_Items (
        order_item_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        order_id NUMBER,
        medicine_id NUMBER,
        quantity NUMBER,
        unit_price NUMBER(10,2),
        line_total NUMBER(12,2),
        CONSTRAINT fk_oi_order FOREIGN KEY(order_id) REFERENCES Orders(order_id)
    )
    """, silent_on_exists=True)
    # Audit log
    try_execute("""
    CREATE TABLE Audit_Log (
        audit_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        action_by VARCHAR2(100),
        action VARCHAR2(100),
        object_name VARCHAR2(100),
        details VARCHAR2(2000),
        action_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """, silent_on_exists=True)

    # Add a CHECK constraint: unit_price >= 0
    try:
        cur.execute("ALTER TABLE Medicines ADD (CONSTRAINT chk_price_nonneg CHECK (unit_price >= 0))")
    except Exception:
        pass  # ignore if exists


    con.commit()
    print("Schema ensured. Tables and basic constraints created.\n")
    time.sleep(1)

# ---------- Seed realistic sample data ----------
def seed_data():
    print("Seeding suppliers, customers, medicines, inventory (if not present)...")

    # --- SUPPLIERS ---
    suppliers = [
        ("Cipla Ltd.", "sales@cipla.com", "+91-9876543210"),
        ("Sun Pharma", "support@sunpharma.com", "+91-9123456780")
    ]
    for name, email, phone in suppliers:
        cur.execute("""
            SELECT supplier_id FROM Suppliers
            WHERE LOWER(name) = LOWER(:1)
               OR LOWER(contact_email) = LOWER(:2)
               OR phone = :3
        """, (name, email, phone))
        if not cur.fetchone():
            try_execute("INSERT INTO Suppliers(name, contact_email, phone) VALUES(:1,:2,:3)",
                        (name, email, phone))
    con.commit()

    # --- CUSTOMERS ---
    cur.execute("""
        SELECT customer_id FROM Customers
        WHERE LOWER(name) = LOWER(:1)
           OR LOWER(email) = LOWER(:2)
    """, ("John Doe", "john@example.com"))
    if not cur.fetchone():
        try_execute("INSERT INTO Customers(name, phone, email, address) VALUES(:1,:2,:3,:4)",
                    ("John Doe", "9998887776", "john@example.com", "23 Green Street, Vellore"))

    # --- MEDICINES ---
    medicines = [
        ("Paracetamol", "Tablet", "500 mg", 2.50, 1, "2026-02-15"),
        ("Amoxicillin", "Capsule", "250 mg", 5.00, 2, "2025-12-01"),
        ("OldSyrup", "Syrup", "100 ml", 40.00, 2, "2020-01-01")
    ]

    for name, form, strength, price, sup, expiry in medicines:
        cur.execute("""
            SELECT medicine_id FROM Medicines
            WHERE LOWER(name) = LOWER(:1)
              AND LOWER(pharma_form) = LOWER(:2)
              AND LOWER(strength) = LOWER(:3)
              AND TO_CHAR(expiry_date, 'YYYY-MM-DD') = :4
        """, (name, form, strength, expiry))
        if not cur.fetchone():
            try_execute("""
                INSERT INTO Medicines(name, pharma_form, strength, unit_price, supplier_id, expiry_date)
                VALUES(:1,:2,:3,:4,:5,TO_DATE(:6,'YYYY-MM-DD'))
            """, (name, form, strength, price, sup, expiry))
    con.commit()

    # --- INVENTORY ---
    cur.execute("SELECT medicine_id FROM Medicines")
    meds = [r[0] for r in cur.fetchall()]
    for mid in meds:
        cur.execute("SELECT 1 FROM Inventory WHERE medicine_id = :1", (mid,))
        if not cur.fetchone():
            try_execute("INSERT INTO Inventory(medicine_id, qty, min_threshold) VALUES(:1, :2, :3)",
                        (mid, 50, 10))
    con.commit()

    print("Seeding done.\n")
    time.sleep(1)
        


# ---------- Triggers: expiry protection & audit ----------
def setup_triggers():
    print("Creating triggers: expiry-check (BEFORE INSERT) and audit logging (AFTER INSERT/UPDATE/DELETE).")
    # BEFORE INSERT on Medicines: Give Warning for Expired Medicine
    try_execute("""
    CREATE OR REPLACE TRIGGER trg_med_before_ins
    BEFORE INSERT OR UPDATE ON Medicines
    FOR EACH ROW
    DECLARE
    BEGIN
          -- Check if expiry_date is in the past (i.e., expired)
      IF :NEW.expiry_date IS NOT NULL AND :NEW.expiry_date < TRUNC(SYSDATE) THEN
            -- Print a warning message (capturable in Python)
        DBMS_OUTPUT.PUT_LINE('Warning: Medicine "' || :NEW.name || 
                         '" has an expired date (' || TO_CHAR(:NEW.expiry_date, 'YYYY-MM-DD') || ').');
      END IF;
    END;
    """)
    # AFTER changes to Orders and Medicines -> audit
    try_execute("""
    CREATE OR REPLACE TRIGGER trg_audit_orders
    AFTER INSERT OR UPDATE OR DELETE ON Orders
    FOR EACH ROW
    BEGIN
      IF INSERTING THEN
        INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER,'INSERT','ORDERS','Order placed or inserted');
      ELSIF UPDATING THEN
        INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER,'UPDATE','ORDERS','Order updated');
      ELSIF DELETING THEN
        INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER,'DELETE','ORDERS','Order deleted');
      END IF;
    END;
    """)
    try_execute("""
    CREATE OR REPLACE TRIGGER trg_audit_medicines
    AFTER INSERT OR UPDATE OR DELETE ON Medicines
    FOR EACH ROW
    BEGIN
      IF INSERTING THEN
        INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER,'INSERT','MEDICINES','Inserted ' || :NEW.name);
      ELSIF UPDATING THEN
        INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER,'UPDATE','MEDICINES','Updated ' || :NEW.name);
      ELSIF DELETING THEN
        INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER,'DELETE','MEDICINES','Deleted ' || :OLD.name);
      END IF;
    END;
    """)
    con.commit()
    print("Triggers created.\n")
    time.sleep(1)

# ---------- Stored Procedure: place order (transactional) ----------
def create_stored_procedures():
    print("Creating stored procedure sp_place_order (places order, updates inventory, adds order_items).")
    
    try_execute("""CREATE OR REPLACE PROCEDURE sp_place_order (
        p_customer_id IN NUMBER,
          p_items       IN "SYS"."ODCINUMBERLIST",
          p_qtys        IN "SYS"."ODCINUMBERLIST"
        ) IS
          v_unit_price   NUMBER(10,2);
          v_total        NUMBER(12,2) := 0;
          v_line_total   NUMBER(12,2);
          v_order_id     NUMBER;
          v_stock        NUMBER;
          v_expiry       DATE;
        BEGIN
          IF p_items.COUNT != p_qtys.COUNT THEN
            RAISE_APPLICATION_ERROR(-20060, 'Items and quantities length mismatch');
          END IF;

          FOR i IN 1 .. p_items.COUNT LOOP
            BEGIN
              SELECT unit_price, expiry_date
              INTO v_unit_price, v_expiry
              FROM Medicines
              WHERE medicine_id = p_items(i);
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20063, 'Medicine not found: ' || p_items(i));
            END;

            IF v_expiry IS NOT NULL AND v_expiry < TRUNC(SYSDATE) THEN
              RAISE_APPLICATION_ERROR(-20061, 'Cannot sell expired medicine id ' || p_items(i));
            END IF;

            BEGIN
              SELECT qty INTO v_stock
              FROM Inventory
              WHERE medicine_id = p_items(i)
              FOR UPDATE;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20064, 'Inventory row not found for medicine id ' || p_items(i));
            END;

            IF v_stock < p_qtys(i) THEN
              RAISE_APPLICATION_ERROR(-20062, 'Insufficient stock for medicine id ' || p_items(i));
            END IF;

            v_line_total := v_unit_price * p_qtys(i);
            v_total := v_total + v_line_total;
          END LOOP;

          INSERT INTO Orders (customer_id, total_amount, status)
          VALUES (p_customer_id, v_total, 'COMPLETED')
          RETURNING order_id INTO v_order_id;

          FOR i IN 1 .. p_items.COUNT LOOP
            SELECT unit_price INTO v_unit_price FROM Medicines WHERE medicine_id = p_items(i);

            INSERT INTO Order_Items (order_id, medicine_id, quantity, unit_price, line_total)
            VALUES (v_order_id, p_items(i), p_qtys(i), v_unit_price, v_unit_price * p_qtys(i));

            UPDATE Inventory
            SET qty = qty - p_qtys(i)
            WHERE medicine_id = p_items(i);
          END LOOP;

          INSERT INTO Audit_Log (action_by, action, object_name, details)
          VALUES (USER, 'PROC', 'sp_place_order', 'Order ' || v_order_id || ' placed for customer ' || NVL(TO_CHAR(p_customer_id),'UNKNOWN'));

          COMMIT;
        EXCEPTION
          WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
        END sp_place_order;
    """)
    print("Stored procedure created.\n")
    time.sleep(1)

# ---------- Views for reporting ----------

def create_views():
    print("Creating view vw_inventory_summary for quick inventory glance.")
    try_execute("""
    CREATE OR REPLACE VIEW vw_inventory_summary AS
      SELECT m.medicine_id,
             NVL(m.name,'') AS name,
             NVL(m.pharma_form,'') AS pharma_form,
             NVL(m.strength,'') AS strength,
             NVL(m.unit_price,0) AS unit_price,
             NVL(i.qty,0) AS qty,
             m.expiry_date,
             NVL(m.is_active,'Y') AS is_active
      FROM Medicines m LEFT JOIN Inventory i ON m.medicine_id = i.medicine_id
    """)
    con.commit()
    print("View created.\n")
    time.sleep(1)



# ---------- USER-FACING FUNCTIONS (pharmacy style) ----------

def manage_inventory_menu():
    while True:
        print("\n--- Manage Inventory ---")
        print("1. Add New Medicine")
        print("2. Update Stock Quantity")
        print("3. View Inventory Summary")
        print("4. View Low Stock Items")
        print("5. Retire Medicine (remove from active inventory)")
        print("6. Restore Retired Medicine")
        print("7. Back to Main")
        ch = input("Enter choice: ").strip()
        if ch == "1":
            add_medicine()
        elif ch == "2":
            update_stock()
        elif ch == "3":
            while True:
                print("1. View Inventory Summary of all medicines")
                print("2. View Inventory Summary of only non-expried medicines(Active Inventory)")
                print("3. View Expiry/Near-Expiry Medicines present in Inventory")
                print("4. Back to Manage Inventory")
                c=input("Enter choice: ").strip()
                if c == "1":
                    view_inventory(include_inactive=True)
                elif c == "2":
                    view_inventory(include_inactive=False)   
                elif c == "3":
                    view_expiring_meds()
                elif c == "4":
                    break
                else:
                    print("Invalid choice")
                    
        elif ch == "4":
            view_low_stock()
        elif ch == "5":
            retire_medicine()
        elif ch == "6":
            restore_medicine()
        elif ch == "7":
            break
        else:
            print("Invalid choice")


def add_medicine():
    print("\n--- Add New Medicine ---")
    name = input("Name: ").strip()
    if not name:
        print("Name is required. Aborting.")
        return

    form = input("Form (Tablet/Syrup/Capsule...): ").strip()
    if not form:
        print("Form cannot be empty. Aborting.")
        return

    strength = input("Strength (e.g., 500 mg, 100 ml): ").strip()
    if not strength:
        print("Strength cannot be empty. Aborting.")
        return

    quantity_str = input("Quantity: ").strip()
    quantity = int(quantity_str) if quantity_str else 0

    price_input = input("Unit price (â‚¹): ").strip()
    price = float(price_input) if price_input else 0.0

    supplier_input = input("Supplier ID: ").strip()
    supplier_id = int(supplier_input) if supplier_input else None

    expiry_input = input("Expiry date (YYYY-MM-DD): ").strip()
    if not expiry_input:
        print("Expiry date is required. Aborting.")
        return

    # validate expiry format
    try:
        expiry_date = datetime.strptime(expiry_input, "%Y-%m-%d").date()
    except ValueError:
        print("Invalid date format. Please use YYYY-MM-DD.")
        return

    # warn if expired
    if expiry_date < datetime.now().date():
        print(f"Warning: This medicine is already expired ({expiry_date}).")
        confirm = input("Do you still want to add it? (y/n): ").strip().lower()
        if confirm != "y":
            print("Aborted adding expired medicine.")
            return

    try:
        # check duplicate
        cur.execute("""
            SELECT medicine_id FROM Medicines
            WHERE LOWER(name)=LOWER(:1)
              AND LOWER(pharma_form)=LOWER(:2)
              AND LOWER(strength)=LOWER(:3)
              AND TO_CHAR(expiry_date,'YYYY-MM-DD')=:4
        """, (name, form, strength, expiry_input))
        existing = cur.fetchone()
        if existing:
            print(f"Medicine already exists (ID: {existing[0]}). Skipping insert.")
            return

        # insert
        cur.execute("""
            INSERT INTO Medicines (name, pharma_form, strength, unit_price, supplier_id, expiry_date)
            VALUES (:1, :2, :3, :4, :5, TO_DATE(:6,'YYYY-MM-DD'))
        """, (name, form, strength, price, supplier_id, expiry_input))
        con.commit()

        # get medicine id
        cur.execute("""
            SELECT medicine_id FROM Medicines
            WHERE LOWER(name)=LOWER(:1)
              AND LOWER(pharma_form)=LOWER(:2)
              AND LOWER(strength)=LOWER(:3)
              AND TO_CHAR(expiry_date,'YYYY-MM-DD')=:4
            ORDER BY medicine_id DESC FETCH FIRST 1 ROWS ONLY
        """, (name, form, strength, expiry_input))
        mid = cur.fetchone()[0]

        try_execute("INSERT INTO Inventory (medicine_id, qty, min_threshold) VALUES (:1, :2, :3)",
                    (mid, quantity, 10))
        con.commit()

        print(f"Medicine '{name}' added successfully with ID {mid}.")
    except Exception as e:
        print("Error adding medicine:", e)



def update_stock():
    print("\n--- Update Stock ---")
    try:
        mid = int(input("Medicine ID: ").strip())
        qty = int(input("Quantity to add (use negative to reduce): ").strip())
    except:
        print("Invalid input")
        return
    try:
        cur.execute("UPDATE Inventory SET qty = NVL(qty,0) + :1 WHERE medicine_id = :2", (qty, mid))
        if cur.rowcount == 0:
            print("Inventory row missing for this medicine. Creating one.")
            cur.execute("INSERT INTO Inventory(medicine_id, qty, min_threshold) VALUES(:1, :2, :3)", (mid, qty, 10))
        con.commit()
        print("Stock updated.")
        cur.execute("INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER,'UPDATE','INVENTORY','Medicine '||:1||' qty change '||:2)", (mid, qty))
        con.commit()
    except Exception as e:
        print("Error updating stock:", e)


def view_inventory(include_inactive):
    """
    Show inventory. By default shows only active medicines.
    If include_inactive True, shows all medicines including retired/inactive ones.
    """
    print("\n--- Inventory Summary ---")
    if include_inactive:
        # show everything
        cur.execute("SELECT medicine_id, name, pharma_form, strength, unit_price, qty, expiry_date, NVL(is_active,'Y') FROM vw_inventory_summary")
    else:
        # show only active medicines
        # vw_inventory_summary includes is_active column (see create_views changes below)
        cur.execute("SELECT medicine_id, name, pharma_form, strength, unit_price, qty, expiry_date, NVL(is_active,'Y') FROM vw_inventory_summary WHERE NVL(is_active,'Y') = 'Y'")

    rows = cur.fetchall()
    if not rows:
        print("No medicines found.")
        return

    print(f"{'ID':<5} {'Name':<25} {'Form':<10} {'Str':<12} {'Price':>10} {'Qty':>6} {'Expiry':<12} {'Active':<6}")
    for r in rows:
        mid, name, form, strength, price, qty, expiry, is_active = r
        name = (name or "").strip()
        form = form or ""
        strength = strength or ""
        try:
            price = float(price) if price is not None else 0.0
        except Exception:
            price = 0.0
        qty = int(qty) if qty is not None else 0
        expiry_str = expiry.strftime("%Y-%m-%d") if expiry else "N/A"
        act = is_active or 'Y'
        print(f"{mid:<5} {name[:25]:<25} {form:<10} {strength:<12} {price:>10.2f} {qty:>6} {expiry_str:<12} {act:<6}")
    time.sleep(1)

def view_low_stock():
    print("\n--- Low Stock Items (qty <= min_threshold) ---")
    cur.execute("""
      SELECT m.medicine_id, m.name, i.qty, i.min_threshold
      FROM Inventory i JOIN Medicines m ON i.medicine_id = m.medicine_id
      WHERE NVL(i.qty,0) <= NVL(i.min_threshold,10)
      ORDER BY i.qty ASC
    """)
    rows = cur.fetchall()
    if not rows:
        print("No low stock items.")
    else:
        for r in rows:
            print(f"ID:{r[0]} | {r[1]} | Qty:{r[2]} | Threshold:{r[3]}")
    time.sleep(1)

def view_expiring_meds():
    print("\n---Near-expiry Medicines ---")
    # expired
    cur.execute("SELECT medicine_id, name, expiry_date FROM Medicines WHERE expiry_date < TRUNC(SYSDATE)")
    expired = cur.fetchall()
    if expired:
        print("EXPIRED MEDICINES:")
        for r in expired:
            print(f"ID:{r[0]} | {r[1]} | Expiry:{r[2].strftime('%Y-%m-%d')}")
    else:
        print("No expired medicines.")
    # near expiry within 90 days
    cur.execute("SELECT medicine_id, name, expiry_date FROM Medicines WHERE expiry_date BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE)+90")
    near = cur.fetchall()
    if near:
        print("\nNEAR-EXPIRY (next 90 days):")
        for r in near:
            print(f"ID:{r[0]} | {r[1]} | Expiry:{r[2].strftime('%Y-%m-%d')}")
    time.sleep(1)
def retire_medicine():
    """
    Mark a medicine as retired/inactive and set inventory qty to 0.
    This keeps the record for audit but removes it from the active inventory view.
    """
    print("\n--- Retire / Remove Medicine from Active Inventory ---")
    try:
        mid = int(input("Medicine ID to retire: ").strip())
    except:
        print("Invalid Medicine ID.")
        return

    # check existence
    cur.execute("SELECT name, expiry_date FROM Medicines WHERE medicine_id = :1", (mid,))
    row = cur.fetchone()
    if not row:
        print("Medicine not found.")
        return

    name, expiry = row
    expiry_str = expiry.strftime("%Y-%m-%d") if expiry else "N/A"

    print(f"You are about to retire: ID:{mid} | {name} | Expiry:{expiry_str}")
    confirm = input("Confirm retire? (y/n): ").strip().lower()
    if confirm != 'y':
        print("Aborted.")
        return

    try:
        # zero inventory (if exists)
        cur.execute("UPDATE Inventory SET qty = 0 WHERE medicine_id = :1", (mid,))
        # mark medicine inactive and set retired timestamp
        cur.execute("UPDATE Medicines SET is_active = 'N', retired_at = SYSTIMESTAMP WHERE medicine_id = :1", (mid,))
        # audit
        cur.execute("INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER, 'RETIRE', 'MEDICINES', 'Retired medicine ' || :1)", (mid,))
        con.commit()
        print(f"Medicine ID {mid} retired and inventory set to 0.")
    except Exception as e:
        print("Error retiring medicine:", e)


def restore_medicine():
    """
    Restore a previously retired medicine (set is_active = 'Y').
    Does NOT change inventory qty; you can restock separately with update_stock().
    """
    print("\n--- Restore Retired Medicine ---")
    try:
        mid = int(input("Medicine ID to restore: ").strip())
    except:
        print("Invalid Medicine ID.")
        return

    cur.execute("SELECT name, is_active FROM Medicines WHERE medicine_id = :1", (mid,))
    row = cur.fetchone()
    if not row:
        print("Medicine not found.")
        return
    name, is_active = row
    if is_active == 'Y':
        print("Medicine is already active.")
        return

    confirm = input(f"Restore medicine ID {mid} ({name})? (y/n): ").strip().lower()
    if confirm != 'y':
        print("Aborted.")
        return

    try:
        cur.execute("UPDATE Medicines SET is_active = 'Y', retired_at = NULL WHERE medicine_id = :1", (mid,))
        cur.execute("INSERT INTO Audit_Log(action_by, action, object_name, details) VALUES(USER, 'RESTORE', 'MEDICINES', 'Restored medicine ' || :1)", (mid,))
        con.commit()
        print(f"Medicine ID {mid} restored.")
    except Exception as e:
        print("Error restoring medicine:", e)


# ---------- SALES & Billing ----------
def sales_menu():
    while True:
        print("\n--- Sales & Billing ---")
        print("1. Create Customer Invoice (Place Order)")
        print("2. View Orders")
        print("3. Daily Sales Summary (report)")
        print("4. Back to Main")
        ch = input("Enter choice: ").strip()
        if ch == "1":
            create_invoice()
        elif ch == "2":
            view_orders()
        elif ch == "3":
            daily_sales_summary()
        elif ch == "4":
            break
        else:
            print("Invalid choice")

def create_invoice():
    print("\n--- Create Invoice ---")
    try:
        cid = int(input("Customer ID ( First Time? enter 0 to create one): ").strip() or "0")
    except:
        print("Invalid customer id")
        return

    if cid == 0:
        # quick guest creation
        name = input("Customer name: ").strip() 
        if not(name):
                print("Customer name cannot be blank. Please enter a valid name. Aborting.")
                return
        phone = input("Phone: ").strip()
        if not PHONE_RE.match(phone):
            print("Invalid phone format. Please enter digits, +, -, spaces or parentheses. Aborting.")
            return
        cur.execute("INSERT INTO Customers(name, phone) VALUES(:1, :2)", (name, phone))
        con.commit()
        cur.execute("SELECT customer_id FROM Customers WHERE ROWID = (SELECT MAX(ROWID) FROM Customers)")
        cid = cur.fetchone()[0]
        print("Guest customer id:", cid)

    items = []
    qtys = []

    while True:
        try:
            mid = int(input("Medicine ID to add (0 to finish): ").strip())
        except:
            print("Invalid id")
            continue
        if mid == 0:
            break
        try:
            q = int(input("Quantity: ").strip())
        except:
            print("Invalid qty")
            continue
        items.append(mid)
        qtys.append(q)

    if not items:
        print("No items selected. Aborting invoice.")
        return

    #Call stored procedure sp_place_order using SYS.ODCINUMBERLIST
    try:
        # Get Oracle type for SYS.ODCINUMBERLIST
        odci_type = con.gettype("SYS.ODCINUMBERLIST")

        # Create Oracle collections from Python lists
        oracle_items = odci_type.newobject()
        oracle_items.extend(items)

        oracle_qtys = odci_type.newobject()
        oracle_qtys.extend(qtys)

        # Call the procedure
        try:
            cur.callproc("sp_place_order", [cid, oracle_items, oracle_qtys])
            con.commit()
            print("Order placed successfully!")
        except cx_Oracle.DatabaseError as e:
            error_obj, = e.args
            full_msg = error_obj.message.strip()

            # Remove any ORA-06512 lines (Oracle stack trace)
            clean_lines = [line for line in full_msg.split("\n") if not line.startswith("ORA-06512")]
            clean_msg = "\n".join(clean_lines)

            if "ORA-20061" in clean_msg:
                print("Order blocked: One or more selected medicines are expired.")
                print("Error placing order:", clean_msg)
            else:
                print("Error placing order:", clean_msg)


    except Exception as e:
        print("Error placing order:", e)


def view_orders():
    print("\n--- Orders List ---")
    cur.execute("""
      SELECT o.order_id, o.order_date, c.name, o.total_amount, o.status
      FROM Orders o LEFT JOIN Customers c ON o.customer_id = c.customer_id
      ORDER BY o.order_date DESC
    """)
    rows = cur.fetchall()
    if not rows:
        print("No orders found.")
        return
    for r in rows:
        oid, odate, cname, total, status = r
        odate_str = odate.strftime("%Y-%m-%d")
        print(f"OrderID:{oid} | Date:{odate_str} | Customer:{cname} | Total:â‚¹{total} | Status:{status}")
        # show items
        cur.execute("SELECT medicine_id, quantity, unit_price, line_total FROM Order_Items WHERE order_id = :1", (oid,))
        its = cur.fetchall()
        for it in its:
            print(f"  - MedID:{it[0]} | Qty:{it[1]} | Unit:â‚¹{it[2]} | Line:â‚¹{it[3]}")
    time.sleep(1)

def daily_sales_summary():
    print("\n--- Daily Sales Summary (last 7 days) ---")
    cur.execute("""
      SELECT TRUNC(order_date) sale_date, COUNT(*) orders, SUM(total_amount) total_sales, AVG(total_amount) avg_order
      FROM Orders
      WHERE order_date >= TRUNC(SYSDATE)-7
      GROUP BY TRUNC(order_date)
      ORDER BY TRUNC(order_date) DESC
    """)
    rows = cur.fetchall()
    if not rows:
        print("No recent sales.")
        return
    for r in rows:
        date_str = r[0].strftime('%Y-%m-%d')
        print(f"{date_str} | Orders: {r[1]} | Sales: â‚¹{r[2]:.2f} | Avg order: â‚¹{r[3]:.2f}")
    time.sleep(1)

# ---------- Supplier Management ----------
def supplier_menu():
    while True:
        print("\n--- Supplier Management ---")
        print("1. Add Supplier")
        print("2. View Suppliers")
        print("3. Supplier Performance (avg price, medicines count)")
        print("4. Back to Main")
        ch = input("Enter choice: ").strip()
        if ch == "1":
            add_supplier()
        elif ch == "2":
            view_suppliers()
        elif ch == "3":
            supplier_performance()
        elif ch == "4":
            break
        else:
            print("Invalid choice")
'''
def add_supplier():
    print("\n--- Add Supplier ---")
    name = input("Name: ").strip()
    email = input("Email: ").strip()
    phone = input("Phone: ").strip()
    try:
        cur.execute("""
            SELECT supplier_id FROM Suppliers
            WHERE LOWER(name) = LOWER(:1)
              OR LOWER(contact_email) = LOWER(:2)
              OR phone = :3
        """, (name, email, phone))
        existing = cur.fetchone()
        if existing:
            print(f"Supplier already exists (ID: {existing[0]}). Skipping insert.")
            return
    except Exception as e:
        print("Error checking existing supplier:", e)
        return
    try:
        cur.execute("INSERT INTO Suppliers(name, contact_email, phone) VALUES(:1,:2,:3)", (name, email, phone))
        con.commit()
        print("Supplier added.")
    except Exception as e:
        print("Error:", e)
'''
def add_supplier():
    print("\n--- Add Supplier ---")
    name = input("Name: ").strip()
    if not name:
        print("Name is required. Aborting.")
        return

    email = input("Email: ").strip()
    if not email:
        print("Email is required. Aborting.")
        return
    if not EMAIL_RE.match(email):
        print("Invalid email format. Aborting.")
        return

    phone = input("Phone: ").strip()
    if not phone:
        print("Phone is required. Aborting.")
        return
    if not PHONE_RE.match(phone):
        print("Invalid phone format. Please enter digits, +, -, spaces or parentheses. Aborting.")
        return

    # check existing
    try:
        cur.execute("""
            SELECT supplier_id FROM Suppliers
            WHERE LOWER(name) = LOWER(:1)
              OR LOWER(contact_email) = LOWER(:2)
              OR phone = :3
        """, (name, email, phone))
        existing = cur.fetchone()
        if existing:
            print(f"Supplier already exists (ID: {existing[0]}). Skipping insert.")
            return
    except Exception as e:
        print("Error checking existing supplier:", e)
        return

    try:
        cur.execute("INSERT INTO Suppliers(name, contact_email, phone) VALUES(:1,:2,:3)", (name, email, phone))
        con.commit()
        print("Supplier added.")
    except Exception as e:
        print("Error:", e)

def view_suppliers():
    print("\n--- Suppliers ---")
    cur.execute("SELECT supplier_id, name, contact_email, phone, created_at FROM Suppliers")
    for r in cur.fetchall():
        print(f"ID:{r[0]} | {r[1]} | {r[2]} | {r[3]} | Created:{r[4].strftime('%Y-%m-%d %H:%M:%S')}")
    time.sleep(1)

def supplier_performance():
    print("\n--- Supplier Performance (group by supplier) ---")
    cur.execute("""
      SELECT s.supplier_id, s.name, COUNT(m.medicine_id) meds_count, AVG(m.unit_price) avg_price, MAX(m.unit_price) max_price
      FROM Suppliers s LEFT JOIN Medicines m ON s.supplier_id = m.supplier_id
      GROUP BY s.supplier_id, s.name
      HAVING COUNT(m.medicine_id) >= 0
      ORDER BY meds_count DESC
    """)
    rows = cur.fetchall()
    for r in rows:
        print(f"SupplierID:{r[0]} | {r[1]} | Medicines:{r[2]} | Avg Price:â‚¹{r[3] or 0:.2f} | Max:â‚¹{r[4] or 0:.2f}")
    time.sleep(1)

# ---------- Reports & Advanced Queries (demonstrate ANY/ALL/IN/EXISTS/UNION/INTERSECT) ----------
def reports_menu():
    while True:
        print("\n--- Reports & Advanced Queries ---")
        print("1. Medicines priced above average (subquery)")
        print("2. Medicines having inventory > ANY mins(min_threshold) across inventory ")
        print("3. Union/Intersect(names)")
        print("4. Audit Log")
        print("5. Back to Main")
        ch = input("Enter choice: ").strip()
        if ch == "1":
            meds_above_avg()
        elif ch == "2":
            meds_inventory_any()
        elif ch == "3":
            union_intersect_demo()
        elif ch == "4":
            view_audit_log()
        elif ch == "5":
            break
        else:
            print("Invalid choice")

def meds_above_avg():
    print("\n--- Medicines priced above average ---")
    cur.execute("SELECT name, unit_price FROM Medicines WHERE unit_price > (SELECT AVG(unit_price) FROM Medicines)")
    rows = cur.fetchall()
    if not rows:
        print("None")
    else:
        for r in rows:
            print(f"{r[0]} | â‚¹{r[1]:.2f}")
    time.sleep(1)

def meds_inventory_any():
    print("\n--- Medicines with inventory greater than ANY of the mins(min_threshold) across inventory---")
    # Example: find meds with qty greater than ANY of the mins across inventory (toy example)
    cur.execute("""
      SELECT m.name, i.qty
      FROM Medicines m JOIN Inventory i ON m.medicine_id = i.medicine_id
      WHERE i.qty > ANY (SELECT min_threshold FROM Inventory)
    """)
    for r in cur.fetchall():
        print(f"{r[0]} | Qty: {r[1]}")
    time.sleep(1)

def union_intersect_demo():
    print("\n--- UNION / INTERSECT  for names(in Supplier and Customers) ---")
    cur.execute("SELECT name FROM Suppliers UNION SELECT name FROM Customers")
    print("Union (unique names):", [r[0] for r in cur.fetchall()])
    cur.execute("SELECT name FROM Suppliers INTERSECT SELECT name FROM Customers")
    print("Intersect (common names):", [r[0] for r in cur.fetchall()])
    time.sleep(1)

def view_audit_log():
    print("\n--- Audit Log (recent 20) ---")
    cur.execute("SELECT audit_id, action_by, action, object_name, details, action_time FROM Audit_Log ORDER BY action_time DESC")
    rows = cur.fetchmany(20)
    for r in rows:
        print(f"{r[0]} | {r[1]} | {r[2]} | {r[3]} | {r[4]} | {r[5]}")
    time.sleep(1)

# ---------- Database Maintenance ----------
def maintenance_menu():
    while True:
        print("\n--- Maintenance & Admin ---")
        print("1. Create Schema & Objects (tables, triggers, procs, views)")
        print("2. Seed sample data")
        print("3. Recreate stored procedures / views / triggers")
        print("4. Cleanup (DROP many objects) - CAREFUL")
        print("5. Back to Main")
        ch = input("Enter choice: ").strip()
        if ch == "1":
            setup_schema()
            create_views()
            setup_triggers()
            create_stored_procedures()
            print("Setup done.")
        elif ch == "2":
            seed_data()
        elif ch == "3":
            create_views()
            setup_triggers()
            create_stored_procedures()
            print("Recreated procs/triggers/views.")
        elif ch == "4":
            confirm = input("Are you sure? Drop tables and objects (y/n): ").strip().lower()
            if confirm == 'y':
                cleanup_db()
        elif ch == "5":
            break
        else:
            print("Invalid choice")

def cleanup_db():
    print("Dropping objects (attempt). This is destructive.")
    stmts = [
        "DROP TRIGGER trg_audit_medicines",
        "DROP TRIGGER trg_audit_orders",
        "DROP TRIGGER trg_med_before_ins",
        "DROP PROCEDURE sp_place_order",
        "DROP VIEW vw_inventory_summary",
        "DROP TABLE Order_Items CASCADE CONSTRAINTS",
        "DROP TABLE Orders CASCADE CONSTRAINTS",
        "DROP TABLE Inventory CASCADE CONSTRAINTS",
        "DROP TABLE Medicines CASCADE CONSTRAINTS",
        "DROP TABLE Customers CASCADE CONSTRAINTS",
        "DROP TABLE Suppliers CASCADE CONSTRAINTS",
        "DROP TABLE Audit_Log CASCADE CONSTRAINTS"
    ]
    for s in stmts:
        try:
            try_execute(s)
            con.commit()
            print("Dropped:", s)
        except Exception as e:
            print("Could not drop:", s, "->", e)
    print("Cleanup attempted.\n")

# ---------- Helper: show simple menu and start ----------
def main_menu():
    while True:
        print("\n" + "*"*60)
        print("      PHARMACY MANAGEMENT SYSTEM")
        print("*"*60)
        print("1. Manage Inventory")
        print("2. Sales & Billing")
        print("3. Supplier Management")
        print("4. Reports & Advanced Queries")
        print("5. Maintenance & Admin")
        print("6. Exit")
        choice = input("Enter your choice: ").strip()
        if choice == "1":
            manage_inventory_menu()
        elif choice == "2":
            sales_menu()
        elif choice == "3":
            supplier_menu()
        elif choice == "4":
            reports_menu()
        elif choice == "5":
            maintenance_menu()
        elif choice == "6":
            print("Goodbye! Closing connection.")
            con.close()
            break
        else:
            print("Invalid choice. Try again.")

# ---------- Start-up welcome and ensure minimal objects exist ----------
def startup():
    print("Welcome to Pharmacy Management System.")
    while True:
        passwd = stdiomask.getpass(prompt="ENTER PASSWORD To Continue:")
        if passwd == "DBMS@7":
            print("WELCOME")
            break
        else:
            print("INCORRECT PASSWORD")
            print("TRY AGAIN")
    # Ensure schema created by default for convenience
    setup_schema()
    create_views()
    create_stored_procedures()
    setup_triggers()
    seed_data()
    print("System ready. Launching main menu...\n")
    time.sleep(1)
    main_menu()

if __name__ == "__main__":
    startup()
